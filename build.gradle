apply plugin: 'idea'

subprojects {

    apply plugin: 'java'

    def localEnv = new Properties();
    localEnv.load(new FileInputStream(file("${projectDir}/../env/local.properties")))

    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/libs-snapshot" }
        maven { url "http://repo.spring.io/milestone" }
    }

    task checkStyle(type: Checkstyle) {
        configFile file("${project.projectDir}/../config/checkstyle/checkstyle.xml")
    }

    test {
        environment localEnv
    }

    task stopMockClientIndex(type: Exec) {
        commandLine 'bash', '-c', "ps aux | grep wiremock | awk '{print \$2}' | head -1 | xargs -n 1 kill -9 \$1"
        ignoreExitValue true
    }

    jar.dependsOn 'checkStyle'
}

ext.libraries = [
        spring_framework     : "org.springframework:spring-core:4.1.0.RELEASE",
        spring_boot_logging  : "org.springframework.boot:spring-boot-starter-log4j:1.2.0.RELEASE",
        spring_boot_actuator  : "org.springframework.boot:spring-boot-starter-actuator:1.2.0.RELEASE",
        spring_data_cassandra: "org.springframework.data:spring-data-cassandra:1.2.+",
        spring_context_support : "org.springframework:spring-context-support:4.1.0.RELEASE",
        mutagen_cassandra    : "com.toddfast.mutagen:mutagen-cassandra:0.4.0",
        snappy               : 'org.xerial.snappy:snappy-java:1.1.1-M1',
        commons_codec        : 'commons-codec:commons-codec:1.3',
        gson                 : 'com.google.code.gson:gson:2.2.4',
        xpp3                 : 'xpp3:xpp3_min:1.1.3.4.O',
        saxen                : 'net.sf.saxon:Saxon-HE:9.4',
        xmlpull              : 'xmlpull:xmlpull:1.1.3.1',
        apache_commons_io    : 'org.apache.commons:commons-io:1.3.2',
        fhir_validator       : 'me.fhir:fhir-dstu2:0.4.0.3925',
        jackson              : 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.4.0',
        saxon                : 'net.sf.saxon:Saxon-HE:9.5.1-6',
        rxjava               : 'io.reactivex:rxjava:1.+',
        netflix_astyanax     : "com.netflix.astyanax:astyanax:1.56.48",
        rome                 : "rome:rome:1.0",
        rome_tools           : "com.rometools:rome:1.5.0",
        time_uuid            : "com.eaio.uuid:uuid:3.2",
        spring_security      : "org.springframework.security:spring-security-web:3.2.5.RELEASE",
        spring_boot_security : "org.springframework.boot:spring-boot-starter-security:1.2.0.RELEASE",
        spring_web           : "org.springframework:spring-web:4.1.0.RELEASE",
        eclipse_moxy         : "org.eclipse.persistence:org.eclipse.persistence.moxy:2.5.2",
        ehcache_core         : "net.sf.ehcache:ehcache-core:2.6.10"
]

//junit         : "junit:junit:4.10",
ext.testLibraries = [
        junit         : dependencies.create("junit:junit:4.10") {
            exclude module: 'hamcrest-core'
            force = true
        },
        mockito       : "org.mockito:mockito-all:1.8.4",
        spring_test   : "org.springframework:spring-test:4.1.1.RELEASE",
        cassandra_unit_spring: "org.cassandraunit:cassandra-unit-spring:2.0.2.2",
        wiremock      : "com.github.tomakehurst:wiremock:1.51",
        hamcrest_core : "org.hamcrest:hamcrest-all:1.3",
        junit_addons  : "junit-addons:junit-addons:1.4"
]


def exportEnvironmentVariablesToXML(defaults) {
    defaults.remove(defaults.envs)
    Properties environmentVariables = new Properties();
    environmentVariables.load(new FileInputStream(new File('env/local.properties')))
    defaults.append new NodeBuilder().envs() {
        environmentVariables.each { prop, value ->
            env(name: prop, value: value)
        }
    }
}

idea {
    workspace {
        iws.withXml { xmlFile ->
            def runManager = xmlFile.asNode().component.find { it.@name == 'RunManager' }
            def junitDefaults = runManager.configuration.find { it.@default == 'true' && it.@type == 'JUnit' }
            junitDefaults.remove(junitDefaults.envs)
            junitDefaults.append new NodeBuilder().envs() {
                env(name: 'PATH_TO_CONFIG', value: "\$PROJECT_DIR\$/env/local.properties")
            }
            /*Configuring application runtime parameters*/
            exportEnvironmentVariablesToXML(runManager.configuration.find {
                it.@default == 'true' && it.@type == 'Application'
            });
        }
    }
    project {
        jdkName = '1.7'
        languageLevel = '1.7'
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
}
